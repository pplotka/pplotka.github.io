<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on PaweÅ‚ PÅ‚otka</title><link>https://pplotka.dev/post/</link><description>Recent content in Posts on PaweÅ‚ PÅ‚otka</description><generator>Hugo -- gohugo.io</generator><language>pl-pl</language><copyright>&amp;copy; Copyright 2021, PaweÅ‚ PÅ‚otka</copyright><lastBuildDate>Tue, 20 Jul 2021 15:10:00 +0200</lastBuildDate><atom:link href="https://pplotka.dev/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Insomnia - transfom Collection to Document.</title><link>https://pplotka.dev/post/insomnia-transform-collection-to-document/</link><pubDate>Tue, 20 Jul 2021 15:10:00 +0200</pubDate><guid>https://pplotka.dev/post/insomnia-transform-collection-to-document/</guid><description>#callout { background: #efefef; padding: 1.5em 1.25em; border-radius: 3px; display: flex; flex-direction: row; margin-bottom: 20px; } #callout-inner { margin-left: 1em; } @media (max-width: 767px) { #callout { padding: 1.5em 0.75em 1.5em 0.6em; } #callout-inner { margin-left: 0.5em; } } ðŸ’¡ This post comes from a series of short tips, where I publish brief stories on how I resolve every day small (and sometimes easy) issues. Some time ago, Insomnia added a new type of project called Document Design.</description></item><item><title>Wordpress - Move cron jobs to CLI</title><link>https://pplotka.dev/post/wordpres-move-cron-jobs-to-cli/</link><pubDate>Sun, 20 Jun 2021 20:04:11 +0200</pubDate><guid>https://pplotka.dev/post/wordpres-move-cron-jobs-to-cli/</guid><description>Some time ago we started to observe performance issues in our companyâ€™s site built with WordPress. One of the issues we have observed was calling crons in random user requests. It is realized by calling URL https://yourdomain.com/wp-cron.php. Although in this file WordPress calls PHP method fastcgi_finish_request, which sends a response to the user as soon as possible, the cost of calling sub-requests during the main request is worth acknowledging and improving.</description></item><item><title>Sylius Behat scenarios in Chrome Headless inside Docker</title><link>https://pplotka.dev/post/sylius-behat-scenarios-in-chrome-headless-inside-docker/</link><pubDate>Mon, 29 Mar 2021 22:02:11 +0100</pubDate><guid>https://pplotka.dev/post/sylius-behat-scenarios-in-chrome-headless-inside-docker/</guid><description>Since this PR, Sylius has started using Chrome Headless to run their Behat scenarios tagged with @javascript (scenarios that require Javascript engine to run correctly - in short, Javascript suits). After the implementation of this change, it turned out that Javascript suits had sped up from 13 minutes to 8.5 minutes. So, I decided also to run my Javascript suit using Chrome Headless. However, there was one problem, namely my whole environment (development, test on the local machine, and test in CI) is based on Docker.</description></item></channel></rss>